print(paste0("SLR",slr,"_RP",rp))
flood <- raster( paste0("/Users/alessandrokerr/Documents/agkerr99.github.io/218y/Assignment 4/flood/SLR",slr,"_RP",rp,"_fc_flood.tif"))
flood_extent <-
(flood > -Inf) %>%
st_as_stars() %>%
st_as_sf(merge = T) %>%
st_set_crs(26910) %>%
st_make_valid() %>%
st_transform(4326)
fc_bldg_flooded <-
fc_bldg_flooded_max[flood_extent,] %>%
st_transform(26910)
flood_crop <-
crop(flood, fc_bldg_flooded)
slr = "025"
rp = "100"
print(paste0("SLR",slr,"_RP",rp))
flood <- raster( paste0("/Users/alessandrokerr/Documents/agkerr99.github.io/218y/Assignment 4/flood/SLR",slr,"_RP",rp,"_fc_flood.tif"))
flood_extent <-
(flood > -Inf) %>%
st_as_stars() %>%
st_as_sf(merge = T) %>%
st_set_crs(26910) %>%
st_make_valid() %>%
st_transform(4326)
fc_bldg_flooded <-
fc_bldg_flooded_max[flood_extent,] %>%
st_transform(26910)
flood_crop <-
crop(flood, fc_bldg_flooded)
flood_crop[is.na(flood_crop)] <- 0
temp <-
raster::extract(
flood_crop,
fc_bldg_flooded,
fun = mean
) %>%
as.data.frame() %>%
rename(avg_depth = V1) %>%
cbind(
fc_bldg_flooded %>%
st_drop_geometry() %>%
dplyr::select(osm_id)
) %>%
mutate(
SLR = slr,
RP = rp
)
fc_bldg_exposure <-
fc_bldg_exposure %>%
rbind(temp)
fc_bldg_exposure <- NULL
for(slr in c("000","025","050")){
for(rp in c("001","020","100")){
print(paste0("SLR",slr,"_RP",rp))
flood <- raster( paste0("/Users/alessandrokerr/Documents/agkerr99.github.io/218y/Assignment 4/flood/SLR",slr,"_RP",rp,"_fc_flood.tif"))
flood_extent <-
(flood > -Inf) %>%
st_as_stars() %>%
st_as_sf(merge = T) %>%
st_set_crs(26910) %>%
st_make_valid() %>%
st_transform(4326)
fc_bldg_flooded <-
fc_bldg_flooded_max[flood_extent,] %>%
st_transform(26910)
if(nrow(fc_bldg_flooded) == 0) {next()}
flood_crop <-
crop(flood, fc_bldg_flooded)
flood_crop[is.na(flood_crop)] <- 0
temp <-
raster::extract(
flood_crop,
fc_bldg_flooded,
fun = mean
) %>%
as.data.frame() %>%
rename(avg_depth = V1) %>%
cbind(
fc_bldg_flooded %>%
st_drop_geometry() %>%
dplyr::select(osm_id)
) %>%
mutate(
SLR = slr,
RP = rp
)
fc_bldg_exposure <-
fc_bldg_exposure %>%
rbind(temp)
}
}
saveRDS(fc_bldg_exposure,"fc_bldg_exposure.rds")
fc_bldg_exposure <- readRDS("fc_bldg_exposure.RDS")
saveRDS(fc_bldg_exposure,"fc_bldg_exposure.rds")
fc_bldg_exposure <- readRDS("fc_bldg_exposure.RDS")
fc_bldg_exposure <- readRDS("fc_bldg_exposure.RDS")
fc_bldg_exposure <- readRDS("fc_bldg_exposure.RDS")
sm_cbg <- block_groups("CA","San Mateo", cb = F, progress_bar = F, year = 2019)
fc_cbg<-sm_cbg %>%
st_centroid() %>%
.[zip,] %>%
st_set_geometry(NULL)%>%
left_join(
sm_cbg %>% select(GEOID)
) %>%
st_as_sf()
library(raster)
library(stringr)
library(tigris)
library(tidyverse)
library(readxl)
library(censusapi)
library(sf)
library(leaflet)
library(htmltools)
library(tidycensus)
library(mapview)
library(dplyr)
library(ggrepel)
library(ggplot2)
library(jsonlite)
library(stars)
library(mapboxapi)
library(tiff)
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(warning = F, message = F)
sm_cbg <- block_groups("CA","San Mateo", cb = F, progress_bar = F, year = 2019)
fc_cbg<-sm_cbg %>%
st_centroid() %>%
.[zip,] %>%
st_set_geometry(NULL)%>%
left_join(
sm_cbg %>% select(GEOID)
) %>%
st_as_sf()
sm_cbg <- block_groups("CA","San Mateo", cb = F, progress_bar = F, year = 2019)
fc_cbg<-sm_cbg %>%
st_centroid() %>%
.[zip,] %>%
st_set_geometry(NULL)%>%
left_join(
sm_cbg %>% dplyr::select(GEOID)
) %>%
st_as_sf()
fc_block_veh_per_bldg <-
fc_bldg %>%
filter(type == "residential" | type == "house" | is.na(type)) %>% # any non-residential buildings?
select(osm_id) %>% # unique ID for each building
st_centroid() %>%
st_join(zip_blocks %>% select(GEOID20)) %>% # block shapes
st_join(sm_cbg %>% select(cbg = GEOID)) %>% # cbg shapes
st_drop_geometry() %>%
group_by(cbg, GEOID20) %>% # "assuming population is distributed evenly across buildings in a block"
summarize(bldg_count = n()) %>% # how to get counts?
left_join(fc_pop_2020, by = c("GEOID20" = "block")) %>%
rename("pop" = "estimate") %>% # census dataset
left_join(fc_vehicles, by = c("cbg")) %>%
rename("vehicle" = "estimate") %>% # census dataset
filter(!is.na(pop)) %>%
filter(!is.na(vehicle)) %>%
filter(pop != 0) %>%
group_by(cbg) %>% # "and vehicles are distributed evenly across population"
mutate(
veh_per_person = vehicle/sum(pop),
ppl_per_bldg = pop/bldg_count,
veh_per_bldg = veh_per_person*ppl_per_bldg # fractional result ok
)
detach(raster)
detach("package:raster")
fc_block_veh_per_bldg <-
fc_bldg %>%
filter(type == "residential" | type == "house" | is.na(type)) %>% # any non-residential buildings?
select(osm_id) %>% # unique ID for each building
st_centroid() %>%
st_join(zip_blocks %>% select(GEOID20)) %>% # block shapes
st_join(sm_cbg %>% select(cbg = GEOID)) %>% # cbg shapes
st_drop_geometry() %>%
group_by(cbg, GEOID20) %>% # "assuming population is distributed evenly across buildings in a block"
summarize(bldg_count = n()) %>% # how to get counts?
left_join(fc_pop_2020, by = c("GEOID20" = "block")) %>%
rename("pop" = "estimate") %>% # census dataset
left_join(fc_vehicles, by = c("cbg")) %>%
rename("vehicle" = "estimate") %>% # census dataset
filter(!is.na(pop)) %>%
filter(!is.na(vehicle)) %>%
filter(pop != 0) %>%
group_by(cbg) %>% # "and vehicles are distributed evenly across population"
mutate(
veh_per_person = vehicle/sum(pop),
ppl_per_bldg = pop/bldg_count,
veh_per_bldg = veh_per_person*ppl_per_bldg # fractional result ok
)
vulnerability <- data.frame(
depth_above_ground = c(0.5,1:10),
perc_damage = c(
0.076,
0.28,
0.462,
0.622,
0.76,
0.876,
0.97,
1,
1,
1,
1
)
) %>%
mutate(
depth_cm = depth_above_ground*30.48
)
library(ggplot2)
ggplot(vulnerability, aes(depth_above_ground, perc_damage)) +
geom_point(shape = 16, size = 5) +
theme_minimal() +
geom_line()
fc_bldg_exposure <-
readRDS("fc_bldg_exposure.rds")
fc_veh_perc_damage <-
approx(
x = vulnerability$depth_cm,
y = vulnerability$perc_damage,
xout = fc_bldg_exposure$avg_depth
) %>%
.[2] %>%
as.data.frame() %>%
rename(perc_damage = y) %>%
cbind(fc_bldg_exposure) %>%
mutate(
perc_damage = ifelse(
is.na(perc_damage),
0,
perc_damage
))
saveRDS(fc_veh_perc_damage,"fc_veh_perc_damage.rds")
fc_veh_perc_damage <- readRDS("fc_veh_perc_damage.rds")
fc_veh_perc_damage_plot <-
expand.grid(
osm_id = unique(fc_veh_perc_damage$osm_id),
SLR = unique(fc_veh_perc_damage$SLR),
RP = unique(fc_veh_perc_damage$RP)
) %>%
left_join(fc_veh_perc_damage) %>%
mutate(
perc_damage = ifelse(
is.na(perc_damage),
0,
perc_damage
))
#detach("package:raster")
fc_veh_damage <-
fc_veh_perc_damage %>%
left_join(fc_bldg %>% select(osm_id)) %>%
st_as_sf() %>%
st_centroid() %>%
st_join(fc_block_veh_per_bldg %>% st_as_sf() %>% select(veh_per_bldg)) %>%
#filter(veh_per_bldg < 4) %>%
mutate(
damage = perc_damage * veh_per_bldg * 27000 * (1-0.505)
) %>%
select(osm_id, SLR, RP, damage) %>%
filter(!is.na(damage))
fc_veh_aal_by_slr <-
fc_veh_damage %>%
st_drop_geometry() %>%
pivot_wider(
names_from = RP,
values_from = damage
) %>%
replace(is.na(.), 0) %>%
mutate(
damage =
0.95*(`001`+`020`)/2 +
0.04*(`020`+`100`)/2 +
0.01*(`100`)
) %>%
select(osm_id, SLR, damage)
fc_veh_aal_by_year <-
fc_veh_aal_by_slr %>%
left_join(
rcp45 %>%
mutate(
SLR = str_pad(SLR, 3 , "left", "0")
) %>%
select(
SLR,
`2020`,
`2030`,
`2040`,
`2050`
)
) %>%
pivot_longer(
`2020`:`2050`,
names_to = "year",
values_to = "occurrence"
) %>%
pivot_longer(
c(damage,occurrence),
names_to = "key",
values_to = "value"
) %>%
pivot_wider(
names_from = c("key","SLR"),
values_from = value
) %>%
replace(is.na(.), 0) %>%
mutate(
damage =
occurrence_050 * (damage_050)
) %>%
mutate(
`Calendar Year` = as.numeric(year)
) %>%
select(osm_id, `Calendar Year`, damage) %>%
left_join(emfac, by = "Calendar Year") %>%
mutate(
Increase =
ifelse(is.na(Increase), 0, Increase)) %>%
mutate(
projected_damage = damage*(1+Increase/100)) %>%
select(osm_id, `Calendar Year`, projected_damage) %>%
rename("year" = "Calendar Year") %>%
rename("damage" = "projected_damage")
fc_veh_aal_by_year_map <-
fc_veh_aal_by_year %>%
pivot_wider(
names_from = year,
values_from = damage
) %>%
mutate(
change = `2050`-`2020`
) %>%
left_join(
fc_bldg_flooded_max %>%
select(osm_id)
) %>%
st_as_sf() %>%
st_transform(4326)
aal_pal <- colorNumeric(
palette = "Reds",
domain = c(0,fc_veh_aal_by_year_map$`2050`)
)
fc_veh_aal_by_year_map %>%
leaflet() %>%
addMapboxTiles(
style_id = "light-v9",
username = "mapbox"
) %>%
addPolygons(
fillColor = ~aal_pal(`2020`),
color = "gray",
fillOpacity = 1,
opacity = 1,
weight = 0.25,
highlightOptions = highlightOptions(
color = "white",
weight = 2
),
label = ~paste0("$",prettyNum(signif(`2020`,2),",")," average annualized loss in 2020"),
group = "2020"
) %>%
addPolygons(
fillColor = ~aal_pal(`2050`),
color = "gray",
fillOpacity = 1,
opacity = 1,
weight = 0.25,
highlightOptions = highlightOptions(
color = "white",
weight = 2
),
label = ~paste0("$",prettyNum(signif(`2050`,2),",")," average annualized loss in 2050"),
group = "2050"
) %>%
addPolygons(
fillColor = ~aal_pal(change),
color = "gray",
fillOpacity = 1,
opacity = 1,
weight = 0.25,
highlightOptions = highlightOptions(
color = "white",
weight = 2
),
label = ~paste0("$",prettyNum(signif(change,2),",")," change in average annualized loss from 2020 to 2050"),
group = "Change"
) %>%
addLegend(
pal = aal_pal,
values = ~`2050`,
title = "AAL"
) %>%
addLayersControl(
baseGroups = c("2020","2050","Change"),
options = layersControlOptions(collapsed = FALSE)
) %>%
showGroup("2050")
fc_boundary <-
places("CA", cb = T, progress_bar = F) %>%
filter(NAME == "Foster City")
fc_bgs <-
block_groups("CA", "San Mateo", progress_bar = F) %>%
select(GEOID) %>%
.[fc_boundary, ]
fc_bg_aal <-
fc_veh_aal_by_year %>%
pivot_wider(
names_from = year,
values_from = damage
) %>%
mutate(
aal = (`2020`*5 + `2030`*10 + `2040`*10 + `2050`*5)/30
) %>%
left_join(
fc_bldg_flooded_max %>%
select(osm_id) %>%
st_centroid()
) %>%
st_as_sf() %>%
st_transform(4269) %>%
st_join(fc_bgs) %>%
st_set_geometry(NULL) %>%
group_by(GEOID) %>%
summarize(
aal = sum(aal),
count = n()
) %>%
left_join(fc_bgs) %>%
st_as_sf()
aal_pal <- colorNumeric(
palette = "Reds",
domain = fc_bg_aal$aal
)
fc_bg_aal %>%
leaflet() %>%
addMapboxTiles(
style_id = "light-v9",
username = "mapbox"
) %>%
addPolygons(
fillColor = ~aal_pal(aal),
color = "gray",
fillOpacity = 0.5,
opacity = 1,
weight = 0.25,
highlightOptions = highlightOptions(
color = "white",
weight = 2
),
label = ~paste0("$",prettyNum(signif(aal,2),",")," average annualized loss across ", count, " buildings, 2020-2050")
) %>%
addLegend(
pal = aal_pal,
values = ~aal,
title = "AAL, 2020-2050"
)
View(fc_veh_damage)
fc_flood_risk <- fc_no_one_vehicle %>%
ungroup() %>%
mutate(sum_one_no_veh = sum(estimate)) %>%
mutate(perc_risk = sum_one_no_veh/nrow(fc_bldg_flooded_max))
paste0("Number of Households at Flood Risk in Foster City with One or No Vehicles: ",fc_flood_risk$sum_one_no_veh[1])
paste0("Percent of Households at Flood Risk in Foster City with One or No Vehicles: ",round(fc_flood_risk$perc_risk[1]*100,0), " %")
library(plotly)
fc_plot <-
plot_ly() %>%
add_trace(
data =
fc_veh_perc_damage_plot %>%
filter(RP == "100") %>%
mutate(SLR = SLR %>% as.numeric()),
x = ~avg_depth,
y = ~perc_damage,
frame = ~SLR,
type = 'scatter',
mode = 'markers',
marker = list(
color = 'rgba(17, 157, 255, 0.01)',
size = 15
),
showlegend = F
) %>%
add_trace(
data = vulnerability,
x = ~depth_cm,
y = ~perc_damage,
type = 'scatter',
mode = 'markers',
marker = list(
color = 'rgb(0,0,0)'
),
showlegend = F
) %>%
layout(
xaxis = list(
title = "Average Flood Depth",
zeroline = FALSE
),
yaxis = list(
title = "Percent Damage"
),
title = "Foster City vehicle damage during<br>100-year storm, by base sea level rise"
) %>%
config(displayModeBar = F)
fc_plot
View(fc_bldg_exposure)
View(fc_vehicles)
View(fc_block_veh_per_bldg)
mapview(fc_block_veh_per_bldg, zcol = "veh_per_bldg")
fc_block_veh_per_bldg %>% st_as_sf() %>% mapview(zcol = "veh_per_bldg")
